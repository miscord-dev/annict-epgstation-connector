// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package annict

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetWannaWatchWorksResponse is returned by GetWannaWatchWorks on success.
type GetWannaWatchWorksResponse struct {
	Viewer GetWannaWatchWorksViewerUser `json:"viewer"`
}

// GetViewer returns GetWannaWatchWorksResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetWannaWatchWorksResponse) GetViewer() GetWannaWatchWorksViewerUser { return v.Viewer }

// GetWannaWatchWorksViewerUser includes the requested fields of the GraphQL type User.
type GetWannaWatchWorksViewerUser struct {
	Works GetWannaWatchWorksViewerUserWorksWorkConnection `json:"works"`
}

// GetWorks returns GetWannaWatchWorksViewerUser.Works, and is useful for accessing the field via an interface.
func (v *GetWannaWatchWorksViewerUser) GetWorks() GetWannaWatchWorksViewerUserWorksWorkConnection {
	return v.Works
}

// GetWannaWatchWorksViewerUserWorksWorkConnection includes the requested fields of the GraphQL type WorkConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Work.
type GetWannaWatchWorksViewerUserWorksWorkConnection struct {
	// A list of nodes.
	Nodes []GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork `json:"nodes"`
}

// GetNodes returns GetWannaWatchWorksViewerUserWorksWorkConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetWannaWatchWorksViewerUserWorksWorkConnection) GetNodes() []GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork {
	return v.Nodes
}

// GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork includes the requested fields of the GraphQL type Work.
// The GraphQL type's documentation follows.
//
// An anime title
type GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork struct {
	Title string `json:"title"`
}

// GetTitle returns GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork.Title, and is useful for accessing the field via an interface.
func (v *GetWannaWatchWorksViewerUserWorksWorkConnectionNodesWork) GetTitle() string { return v.Title }

func GetWannaWatchWorks(
	ctx context.Context,
	client graphql.Client,
) (*GetWannaWatchWorksResponse, error) {
	req := &graphql.Request{
		OpName: "GetWannaWatchWorks",
		Query: `
query GetWannaWatchWorks {
	viewer {
		works(state: WANNA_WATCH) {
			nodes {
				title
			}
		}
	}
}
`,
	}
	var err error

	var data GetWannaWatchWorksResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
